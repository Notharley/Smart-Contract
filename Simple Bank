// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleBank {
    mapping(address => uint256) private balances;
    address public owner;

    constructor() {
        owner = msg.sender; 
    }

   
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero.");
        balances[msg.sender] += msg.value;
    }

   
    function withdraw(uint256 _amount) public {
        require(_amount <= balances[msg.sender], "Insufficient balance.");
        balances[msg.sender] -= _amount;
        payable(msg.sender).transfer(_amount);
    }

    
    function getBalance() public view returns (uint256) {
        return balances[msg.sender];
    }

   
    function withdrawAll() public onlyOwner {
        uint256 contractBalance = address(this).balance;
        require(contractBalance > 0, "Contract balance is zero.");
        payable(owner).transfer(contractBalance);
    }

    
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner.");
        _;
    }

   
    function assertExample() public view {
       
        assert(address(this).balance >= 0);
    }

   
    function revertExample(uint256 _value) public pure {
        
        if (_value == 0) {
            revert("Value cannot be zero.");
        }
    }
}
