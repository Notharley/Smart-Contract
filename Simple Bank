// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Bank {
    address public owner;
    mapping(address => uint256) private balances;

    constructor() {
        owner = msg.sender; 
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    function deposit() public payable {
        
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) public {
        
        require(amount <= balances[msg.sender], "Insufficient balance");
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
    }

    function getBalance() public view returns (uint256) {
        return balances[msg.sender];
    }

    function closeAccount() public {
        uint256 balance = balances[msg.sender];
        
        
        assert(balance >= 0); 

        
        if (balance == 0) {
            revert("Account balance is already zero");
        }

        balances[msg.sender] = 0;
        payable(msg.sender).transfer(balance);
    }

    function emergencyWithdraw() public onlyOwner {
        
        uint256 contractBalance = address(this).balance;
        payable(owner).transfer(contractBalance);
    }
}

